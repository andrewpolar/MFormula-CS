//Designed by Andrew Polar and Mike Poluektov
//This is the demo for competitive replacement of neural networks. The target 'y' is generated by formula
//y = (1/pi)*(2+2*x3)*(1/3)*(atan(20*exp(x5)*(x1-0.5+x2/6))+pi/2) + (1/pi)*(2+2*x4)*(1/3)*(atan(20*exp(x5)*(x1-0.5-x2/6))+pi/2);
//using five randomly selected features x1, x2, x3, x4, x5. Then the model is built as Kolmogorov-Arnold representation.
//The details can be found in video https://www.youtube.com/watch?v=eS_k6L638k0

using System;

namespace MFormula
{
    internal class Program
    {
        static void Main(string[] args)
        {
            DataHolder dh = new DataHolder();
            dh.BuildFormulaData(10000);

            //Expectation model
            KolmogorovModel km_expectaion = new KolmogorovModel(dh._inputs, dh._target);
            km_expectaion.BuildRepresentation();

            double min = Double.MaxValue;
            double max = Double.MinValue;
            double error = 0.0;
            int NTests = 100;
            for (int i = 0; i < NTests; ++i)
            {
                double[] input = dh.GetRandomInput();
                double target = dh.GetTarget(input);
                double model = km_expectaion.ComputeOutput(input);
                if (target < min) min = target;
                if (target > max) max = target;
                error += (target - model) * (target - model);
            }
            error /= NTests;
            error = Math.Sqrt(error);
            error /= (max - min);   

            Console.WriteLine("\nRelative error for unseen data {0:0.0000}", error);
        }
    }
}


